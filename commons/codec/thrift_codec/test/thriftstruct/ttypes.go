// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftstruct

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Numberz int64

const (
	Numberz_ONE   Numberz = 1
	Numberz_TWO   Numberz = 2
	Numberz_THREE Numberz = 3
	Numberz_FIVE  Numberz = 5
	Numberz_SIX   Numberz = 6
	Numberz_EIGHT Numberz = 8
)

func (p Numberz) String() string {
	switch p {
	case Numberz_ONE:
		return "Numberz_ONE"
	case Numberz_TWO:
		return "Numberz_TWO"
	case Numberz_THREE:
		return "Numberz_THREE"
	case Numberz_FIVE:
		return "Numberz_FIVE"
	case Numberz_SIX:
		return "Numberz_SIX"
	case Numberz_EIGHT:
		return "Numberz_EIGHT"
	}
	return "<UNSET>"
}

func NumberzFromString(s string) (Numberz, error) {
	switch s {
	case "Numberz_ONE":
		return Numberz_ONE, nil
	case "Numberz_TWO":
		return Numberz_TWO, nil
	case "Numberz_THREE":
		return Numberz_THREE, nil
	case "Numberz_FIVE":
		return Numberz_FIVE, nil
	case "Numberz_SIX":
		return Numberz_SIX, nil
	case "Numberz_EIGHT":
		return Numberz_EIGHT, nil
	}
	return Numberz(0), fmt.Errorf("not a valid Numberz string")
}

func NumberzPtr(v Numberz) *Numberz { return &v }

type Numberz1 int64

const (
	Numberz1_PostiveOne Numberz1 = -1
	Numberz1_Zero       Numberz1 = 0
	Numberz1_ONE        Numberz1 = 1
	Numberz1_TWO        Numberz1 = 2
)

func (p Numberz1) String() string {
	switch p {
	case Numberz1_PostiveOne:
		return "Numberz1_PostiveOne"
	case Numberz1_Zero:
		return "Numberz1_Zero"
	case Numberz1_ONE:
		return "Numberz1_ONE"
	case Numberz1_TWO:
		return "Numberz1_TWO"
	}
	return "<UNSET>"
}

func Numberz1FromString(s string) (Numberz1, error) {
	switch s {
	case "Numberz1_PostiveOne":
		return Numberz1_PostiveOne, nil
	case "Numberz1_Zero":
		return Numberz1_Zero, nil
	case "Numberz1_ONE":
		return Numberz1_ONE, nil
	case "Numberz1_TWO":
		return Numberz1_TWO, nil
	}
	return Numberz1(0), fmt.Errorf("not a valid Numberz1 string")
}

func Numberz1Ptr(v Numberz1) *Numberz1 { return &v }

type TypedefStruct NormalStruct

func TypedefStructPtr(v TypedefStruct) *TypedefStruct { return &v }

type TypedefString string

func TypedefStringPtr(v TypedefString) *TypedefString { return &v }

type TypedefMap map[string]int64

func TypedefMapPtr(v TypedefMap) *TypedefMap { return &v }

type TypedefEnum Numberz

func TypedefEnumPtr(v TypedefEnum) *TypedefEnum { return &v }

type MapData struct {
	MI64    map[int64]string   `thrift:"M_i64,1" json:"M_i64"`
	MI32    map[int32]string   `thrift:"M_i32,2" json:"M_i32"`
	MI16    map[int16]string   `thrift:"M_i16,3" json:"M_i16"`
	MByte   map[int8]string    `thrift:"M_byte,4" json:"M_byte"`
	MDouble map[float64]string `thrift:"M_double,5" json:"M_double"`
	MString map[string]string  `thrift:"M_string,6" json:"M_string"`
	MBool   map[bool]string    `thrift:"M_bool,7" json:"M_bool"`
	// unused field # 8
	MEnum map[Numberz]string `thrift:"M_enum,9" json:"M_enum"`
}

func NewMapData() *MapData {
	return &MapData{}
}

var MapData_MI64_DEFAULT map[int64]string

func (p *MapData) GetMI64() map[int64]string {
	return p.MI64
}

var MapData_MI32_DEFAULT map[int32]string

func (p *MapData) GetMI32() map[int32]string {
	return p.MI32
}

var MapData_MI16_DEFAULT map[int16]string

func (p *MapData) GetMI16() map[int16]string {
	return p.MI16
}

var MapData_MByte_DEFAULT map[int8]string

func (p *MapData) GetMByte() map[int8]string {
	return p.MByte
}

var MapData_MDouble_DEFAULT map[float64]string

func (p *MapData) GetMDouble() map[float64]string {
	return p.MDouble
}

var MapData_MString_DEFAULT map[string]string

func (p *MapData) GetMString() map[string]string {
	return p.MString
}

var MapData_MBool_DEFAULT map[bool]string

func (p *MapData) GetMBool() map[bool]string {
	return p.MBool
}

var MapData_MEnum_DEFAULT map[Numberz]string

func (p *MapData) GetMEnum() map[Numberz]string {
	return p.MEnum
}
func (p *MapData) IsSetMI64() bool {
	return p.MI64 != nil
}

func (p *MapData) IsSetMI32() bool {
	return p.MI32 != nil
}

func (p *MapData) IsSetMI16() bool {
	return p.MI16 != nil
}

func (p *MapData) IsSetMByte() bool {
	return p.MByte != nil
}

func (p *MapData) IsSetMDouble() bool {
	return p.MDouble != nil
}

func (p *MapData) IsSetMString() bool {
	return p.MString != nil
}

func (p *MapData) IsSetMBool() bool {
	return p.MBool != nil
}

func (p *MapData) IsSetMEnum() bool {
	return p.MEnum != nil
}

func (p *MapData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MapData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64]string, size)
	p.MI64 = tMap
	for i := 0; i < size; i++ {
		var _key0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.MI64[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int32]string, size)
	p.MI32 = tMap
	for i := 0; i < size; i++ {
		var _key2 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.MI32[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int16]string, size)
	p.MI16 = tMap
	for i := 0; i < size; i++ {
		var _key4 int16
		if v, err := iprot.ReadI16(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val5 = v
		}
		p.MI16[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int8]string, size)
	p.MByte = tMap
	for i := 0; i < size; i++ {
		var _key6 int8
		if v, err := iprot.ReadByte(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := int8(v)
			_key6 = temp
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.MByte[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[float64]string, size)
	p.MDouble = tMap
	for i := 0; i < size; i++ {
		var _key8 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val9 = v
		}
		p.MDouble[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.MString = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key10 = v
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val11 = v
		}
		p.MString[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[bool]string, size)
	p.MBool = tMap
	for i := 0; i < size; i++ {
		var _key12 bool
		if v, err := iprot.ReadBool(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.MBool[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[Numberz]string, size)
	p.MEnum = tMap
	for i := 0; i < size; i++ {
		var _key14 Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Numberz(v)
			_key14 = temp
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.MEnum[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MapData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MapData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MapData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMI64() {
		if err := oprot.WriteFieldBegin("M_i64", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:M_i64: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.MI64)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MI64 {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:M_i64: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMI32() {
		if err := oprot.WriteFieldBegin("M_i32", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:M_i32: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.MI32)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MI32 {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:M_i32: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMI16() {
		if err := oprot.WriteFieldBegin("M_i16", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:M_i16: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I16, thrift.STRING, len(p.MI16)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MI16 {
			if err := oprot.WriteI16(int16(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:M_i16: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMByte() {
		if err := oprot.WriteFieldBegin("M_byte", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:M_byte: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.STRING, len(p.MByte)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MByte {
			if err := oprot.WriteByte(int8(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:M_byte: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMDouble() {
		if err := oprot.WriteFieldBegin("M_double", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:M_double: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.DOUBLE, thrift.STRING, len(p.MDouble)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MDouble {
			if err := oprot.WriteDouble(float64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:M_double: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMString() {
		if err := oprot.WriteFieldBegin("M_string", thrift.MAP, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:M_string: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MString)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MString {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:M_string: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMBool() {
		if err := oprot.WriteFieldBegin("M_bool", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:M_bool: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.BOOL, thrift.STRING, len(p.MBool)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MBool {
			if err := oprot.WriteBool(bool(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:M_bool: %s", p, err)
		}
	}
	return err
}

func (p *MapData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMEnum() {
		if err := oprot.WriteFieldBegin("M_enum", thrift.MAP, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:M_enum: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.MEnum)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MEnum {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:M_enum: %s", p, err)
		}
	}
	return err
}

func (p *MapData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MapData(%+v)", *p)
}

type ListData struct {
	LI64    []int64         `thrift:"L_i64,1" json:"L_i64"`
	LI32    []int32         `thrift:"L_i32,2" json:"L_i32"`
	LI16    []int16         `thrift:"L_i16,3" json:"L_i16"`
	LByte   []int8          `thrift:"L_byte,4" json:"L_byte"`
	LDouble []float64       `thrift:"L_double,5" json:"L_double"`
	LString []string        `thrift:"L_string,6" json:"L_string"`
	LBool   []bool          `thrift:"L_bool,7" json:"L_bool"`
	LStruct []*NormalStruct `thrift:"L_struct,8" json:"L_struct"`
	LEnum   []Numberz       `thrift:"L_enum,9" json:"L_enum"`
	L_Ref   []*NormalStruct `thrift:"L_Ref,10" json:"L_Ref"`
}

func NewListData() *ListData {
	return &ListData{}
}

var ListData_LI64_DEFAULT []int64

func (p *ListData) GetLI64() []int64 {
	return p.LI64
}

var ListData_LI32_DEFAULT []int32

func (p *ListData) GetLI32() []int32 {
	return p.LI32
}

var ListData_LI16_DEFAULT []int16

func (p *ListData) GetLI16() []int16 {
	return p.LI16
}

var ListData_LByte_DEFAULT []int8

func (p *ListData) GetLByte() []int8 {
	return p.LByte
}

var ListData_LDouble_DEFAULT []float64

func (p *ListData) GetLDouble() []float64 {
	return p.LDouble
}

var ListData_LString_DEFAULT []string

func (p *ListData) GetLString() []string {
	return p.LString
}

var ListData_LBool_DEFAULT []bool

func (p *ListData) GetLBool() []bool {
	return p.LBool
}

var ListData_LStruct_DEFAULT []*NormalStruct

func (p *ListData) GetLStruct() []*NormalStruct {
	return p.LStruct
}

var ListData_LEnum_DEFAULT []Numberz

func (p *ListData) GetLEnum() []Numberz {
	return p.LEnum
}

var ListData_L_Ref_DEFAULT []*NormalStruct

func (p *ListData) GetL_Ref() []*NormalStruct {
	return p.L_Ref
}
func (p *ListData) IsSetLI64() bool {
	return p.LI64 != nil
}

func (p *ListData) IsSetLI32() bool {
	return p.LI32 != nil
}

func (p *ListData) IsSetLI16() bool {
	return p.LI16 != nil
}

func (p *ListData) IsSetLByte() bool {
	return p.LByte != nil
}

func (p *ListData) IsSetLDouble() bool {
	return p.LDouble != nil
}

func (p *ListData) IsSetLString() bool {
	return p.LString != nil
}

func (p *ListData) IsSetLBool() bool {
	return p.LBool != nil
}

func (p *ListData) IsSetLStruct() bool {
	return p.LStruct != nil
}

func (p *ListData) IsSetLEnum() bool {
	return p.LEnum != nil
}

func (p *ListData) IsSetL_Ref() bool {
	return p.L_Ref != nil
}

func (p *ListData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.LI64 = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem16 = v
		}
		p.LI64 = append(p.LI64, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.LI32 = tSlice
	for i := 0; i < size; i++ {
		var _elem17 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem17 = v
		}
		p.LI32 = append(p.LI32, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int16, 0, size)
	p.LI16 = tSlice
	for i := 0; i < size; i++ {
		var _elem18 int16
		if v, err := iprot.ReadI16(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem18 = v
		}
		p.LI16 = append(p.LI16, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int8, 0, size)
	p.LByte = tSlice
	for i := 0; i < size; i++ {
		var _elem19 int8
		if v, err := iprot.ReadByte(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := int8(v)
			_elem19 = temp
		}
		p.LByte = append(p.LByte, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]float64, 0, size)
	p.LDouble = tSlice
	for i := 0; i < size; i++ {
		var _elem20 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem20 = v
		}
		p.LDouble = append(p.LDouble, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.LString = tSlice
	for i := 0; i < size; i++ {
		var _elem21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem21 = v
		}
		p.LString = append(p.LString, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]bool, 0, size)
	p.LBool = tSlice
	for i := 0; i < size; i++ {
		var _elem22 bool
		if v, err := iprot.ReadBool(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem22 = v
		}
		p.LBool = append(p.LBool, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*NormalStruct, 0, size)
	p.LStruct = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &NormalStruct{}
		if err := _elem23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem23, err)
		}
		p.LStruct = append(p.LStruct, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]Numberz, 0, size)
	p.LEnum = tSlice
	for i := 0; i < size; i++ {
		var _elem24 Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Numberz(v)
			_elem24 = temp
		}
		p.LEnum = append(p.LEnum, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*NormalStruct, 0, size)
	p.L_Ref = tSlice
	for i := 0; i < size; i++ {
		_elem25 := &NormalStruct{}
		if err := _elem25.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem25, err)
		}
		p.L_Ref = append(p.L_Ref, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLI64() {
		if err := oprot.WriteFieldBegin("L_i64", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:L_i64: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LI64)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LI64 {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:L_i64: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLI32() {
		if err := oprot.WriteFieldBegin("L_i32", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:L_i32: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.LI32)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LI32 {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:L_i32: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLI16() {
		if err := oprot.WriteFieldBegin("L_i16", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:L_i16: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I16, len(p.LI16)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LI16 {
			if err := oprot.WriteI16(int16(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:L_i16: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLByte() {
		if err := oprot.WriteFieldBegin("L_byte", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:L_byte: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.BYTE, len(p.LByte)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LByte {
			if err := oprot.WriteByte(int8(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:L_byte: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLDouble() {
		if err := oprot.WriteFieldBegin("L_double", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:L_double: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.LDouble)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LDouble {
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:L_double: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLString() {
		if err := oprot.WriteFieldBegin("L_string", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:L_string: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.LString)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LString {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:L_string: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLBool() {
		if err := oprot.WriteFieldBegin("L_bool", thrift.LIST, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:L_bool: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.BOOL, len(p.LBool)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LBool {
			if err := oprot.WriteBool(bool(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:L_bool: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLStruct() {
		if err := oprot.WriteFieldBegin("L_struct", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:L_struct: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LStruct)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LStruct {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:L_struct: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLEnum() {
		if err := oprot.WriteFieldBegin("L_enum", thrift.LIST, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:L_enum: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.LEnum)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LEnum {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:L_enum: %s", p, err)
		}
	}
	return err
}

func (p *ListData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetL_Ref() {
		if err := oprot.WriteFieldBegin("L_Ref", thrift.LIST, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:L_Ref: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.L_Ref)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.L_Ref {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:L_Ref: %s", p, err)
		}
	}
	return err
}

func (p *ListData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListData(%+v)", *p)
}

type SetData struct {
	SI64    map[int64]bool         `thrift:"S_i64,1" json:"S_i64"`
	SI32    map[int32]bool         `thrift:"S_i32,2" json:"S_i32"`
	SI16    map[int16]bool         `thrift:"S_i16,3" json:"S_i16"`
	SByte   map[int8]bool          `thrift:"S_byte,4" json:"S_byte"`
	SDouble map[float64]bool       `thrift:"S_double,5" json:"S_double"`
	SString map[string]bool        `thrift:"S_string,6" json:"S_string"`
	SBool   map[bool]bool          `thrift:"S_bool,7" json:"S_bool"`
	SStruct map[*NormalStruct]bool `thrift:"S_struct,8" json:"S_struct"`
	SEnum   map[Numberz]bool       `thrift:"S_enum,9" json:"S_enum"`
	S_Ref   map[*NormalStruct]bool `thrift:"S_Ref,10" json:"S_Ref"`
}

func NewSetData() *SetData {
	return &SetData{}
}

var SetData_SI64_DEFAULT map[int64]bool

func (p *SetData) GetSI64() map[int64]bool {
	return p.SI64
}

var SetData_SI32_DEFAULT map[int32]bool

func (p *SetData) GetSI32() map[int32]bool {
	return p.SI32
}

var SetData_SI16_DEFAULT map[int16]bool

func (p *SetData) GetSI16() map[int16]bool {
	return p.SI16
}

var SetData_SByte_DEFAULT map[int8]bool

func (p *SetData) GetSByte() map[int8]bool {
	return p.SByte
}

var SetData_SDouble_DEFAULT map[float64]bool

func (p *SetData) GetSDouble() map[float64]bool {
	return p.SDouble
}

var SetData_SString_DEFAULT map[string]bool

func (p *SetData) GetSString() map[string]bool {
	return p.SString
}

var SetData_SBool_DEFAULT map[bool]bool

func (p *SetData) GetSBool() map[bool]bool {
	return p.SBool
}

var SetData_SStruct_DEFAULT map[*NormalStruct]bool

func (p *SetData) GetSStruct() map[*NormalStruct]bool {
	return p.SStruct
}

var SetData_SEnum_DEFAULT map[Numberz]bool

func (p *SetData) GetSEnum() map[Numberz]bool {
	return p.SEnum
}

var SetData_S_Ref_DEFAULT map[*NormalStruct]bool

func (p *SetData) GetS_Ref() map[*NormalStruct]bool {
	return p.S_Ref
}
func (p *SetData) IsSetSI64() bool {
	return p.SI64 != nil
}

func (p *SetData) IsSetSI32() bool {
	return p.SI32 != nil
}

func (p *SetData) IsSetSI16() bool {
	return p.SI16 != nil
}

func (p *SetData) IsSetSByte() bool {
	return p.SByte != nil
}

func (p *SetData) IsSetSDouble() bool {
	return p.SDouble != nil
}

func (p *SetData) IsSetSString() bool {
	return p.SString != nil
}

func (p *SetData) IsSetSBool() bool {
	return p.SBool != nil
}

func (p *SetData) IsSetSStruct() bool {
	return p.SStruct != nil
}

func (p *SetData) IsSetSEnum() bool {
	return p.SEnum != nil
}

func (p *SetData) IsSetS_Ref() bool {
	return p.S_Ref != nil
}

func (p *SetData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int64]bool, size)
	p.SI64 = tSet
	for i := 0; i < size; i++ {
		var _elem26 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem26 = v
		}
		p.SI64[_elem26] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int32]bool, size)
	p.SI32 = tSet
	for i := 0; i < size; i++ {
		var _elem27 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem27 = v
		}
		p.SI32[_elem27] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int16]bool, size)
	p.SI16 = tSet
	for i := 0; i < size; i++ {
		var _elem28 int16
		if v, err := iprot.ReadI16(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem28 = v
		}
		p.SI16[_elem28] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int8]bool, size)
	p.SByte = tSet
	for i := 0; i < size; i++ {
		var _elem29 int8
		if v, err := iprot.ReadByte(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := int8(v)
			_elem29 = temp
		}
		p.SByte[_elem29] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[float64]bool, size)
	p.SDouble = tSet
	for i := 0; i < size; i++ {
		var _elem30 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem30 = v
		}
		p.SDouble[_elem30] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.SString = tSet
	for i := 0; i < size; i++ {
		var _elem31 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem31 = v
		}
		p.SString[_elem31] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[bool]bool, size)
	p.SBool = tSet
	for i := 0; i < size; i++ {
		var _elem32 bool
		if v, err := iprot.ReadBool(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem32 = v
		}
		p.SBool[_elem32] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[*NormalStruct]bool, size)
	p.SStruct = tSet
	for i := 0; i < size; i++ {
		_elem33 := &NormalStruct{}
		if err := _elem33.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem33, err)
		}
		p.SStruct[_elem33] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[Numberz]bool, size)
	p.SEnum = tSet
	for i := 0; i < size; i++ {
		var _elem34 Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Numberz(v)
			_elem34 = temp
		}
		p.SEnum[_elem34] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[*NormalStruct]bool, size)
	p.S_Ref = tSet
	for i := 0; i < size; i++ {
		_elem35 := &NormalStruct{}
		if err := _elem35.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem35, err)
		}
		p.S_Ref[_elem35] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *SetData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSI64() {
		if err := oprot.WriteFieldBegin("S_i64", thrift.SET, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:S_i64: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.I64, len(p.SI64)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SI64 {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:S_i64: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSI32() {
		if err := oprot.WriteFieldBegin("S_i32", thrift.SET, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:S_i32: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.SI32)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SI32 {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:S_i32: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSI16() {
		if err := oprot.WriteFieldBegin("S_i16", thrift.SET, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:S_i16: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.I16, len(p.SI16)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SI16 {
			if err := oprot.WriteI16(int16(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:S_i16: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSByte() {
		if err := oprot.WriteFieldBegin("S_byte", thrift.SET, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:S_byte: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.BYTE, len(p.SByte)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SByte {
			if err := oprot.WriteByte(int8(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:S_byte: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDouble() {
		if err := oprot.WriteFieldBegin("S_double", thrift.SET, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:S_double: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.DOUBLE, len(p.SDouble)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SDouble {
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:S_double: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSString() {
		if err := oprot.WriteFieldBegin("S_string", thrift.SET, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:S_string: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.SString)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SString {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:S_string: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSBool() {
		if err := oprot.WriteFieldBegin("S_bool", thrift.SET, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:S_bool: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.BOOL, len(p.SBool)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SBool {
			if err := oprot.WriteBool(bool(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:S_bool: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSStruct() {
		if err := oprot.WriteFieldBegin("S_struct", thrift.SET, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:S_struct: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.SStruct)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SStruct {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:S_struct: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSEnum() {
		if err := oprot.WriteFieldBegin("S_enum", thrift.SET, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:S_enum: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.SEnum)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.SEnum {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:S_enum: %s", p, err)
		}
	}
	return err
}

func (p *SetData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetS_Ref() {
		if err := oprot.WriteFieldBegin("S_Ref", thrift.SET, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:S_Ref: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.S_Ref)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.S_Ref {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:S_Ref: %s", p, err)
		}
	}
	return err
}

func (p *SetData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetData(%+v)", *p)
}

type NormalData struct {
	FI64          *int64           `thrift:"F_i64,1" json:"F_i64"`
	FI32          *int32           `thrift:"F_i32,2" json:"F_i32"`
	FI16          *int16           `thrift:"F_i16,3" json:"F_i16"`
	FByte         *int8            `thrift:"F_byte,4" json:"F_byte"`
	FDouble       *float64         `thrift:"F_double,5" json:"F_double"`
	FString       *string          `thrift:"F_string,6" json:"F_string"`
	FBool         *bool            `thrift:"F_bool,7" json:"F_bool"`
	FStruct       *NormalStruct    `thrift:"F_struct,8" json:"F_struct"`
	FEnum         *Numberz         `thrift:"F_enum,9" json:"F_enum"`
	FBinary       []byte           `thrift:"F_binary,10" json:"F_binary"`
	FListString   []string         `thrift:"F_list_string,11" json:"F_list_string"`
	FSetString    map[string]bool  `thrift:"F_set_string,12" json:"F_set_string"`
	FMapString    map[string]int64 `thrift:"F_map_string,13" json:"F_map_string"`
	F_MapData     *MapData         `thrift:"F_MapData,14" json:"F_MapData"`
	F_ListData    *ListData        `thrift:"F_ListData,15" json:"F_ListData"`
	F_SetData     *SetData         `thrift:"F_SetData,16" json:"F_SetData"`
	F_TypedefData *TypedefData     `thrift:"F_TypedefData,17" json:"F_TypedefData"`
}

func NewNormalData() *NormalData {
	return &NormalData{}
}

var NormalData_FI64_DEFAULT int64

func (p *NormalData) GetFI64() int64 {
	if !p.IsSetFI64() {
		return NormalData_FI64_DEFAULT
	}
	return *p.FI64
}

var NormalData_FI32_DEFAULT int32

func (p *NormalData) GetFI32() int32 {
	if !p.IsSetFI32() {
		return NormalData_FI32_DEFAULT
	}
	return *p.FI32
}

var NormalData_FI16_DEFAULT int16

func (p *NormalData) GetFI16() int16 {
	if !p.IsSetFI16() {
		return NormalData_FI16_DEFAULT
	}
	return *p.FI16
}

var NormalData_FByte_DEFAULT int8

func (p *NormalData) GetFByte() int8 {
	if !p.IsSetFByte() {
		return NormalData_FByte_DEFAULT
	}
	return *p.FByte
}

var NormalData_FDouble_DEFAULT float64

func (p *NormalData) GetFDouble() float64 {
	if !p.IsSetFDouble() {
		return NormalData_FDouble_DEFAULT
	}
	return *p.FDouble
}

var NormalData_FString_DEFAULT string

func (p *NormalData) GetFString() string {
	if !p.IsSetFString() {
		return NormalData_FString_DEFAULT
	}
	return *p.FString
}

var NormalData_FBool_DEFAULT bool

func (p *NormalData) GetFBool() bool {
	if !p.IsSetFBool() {
		return NormalData_FBool_DEFAULT
	}
	return *p.FBool
}

var NormalData_FStruct_DEFAULT NormalStruct

func (p *NormalData) GetFStruct() NormalStruct {
	if !p.IsSetFStruct() {
		return NormalData_FStruct_DEFAULT
	}
	return *p.FStruct
}

var NormalData_FEnum_DEFAULT Numberz

func (p *NormalData) GetFEnum() Numberz {
	if !p.IsSetFEnum() {
		return NormalData_FEnum_DEFAULT
	}
	return *p.FEnum
}

var NormalData_FBinary_DEFAULT []byte

func (p *NormalData) GetFBinary() []byte {
	return p.FBinary
}

var NormalData_FListString_DEFAULT []string

func (p *NormalData) GetFListString() []string {
	return p.FListString
}

var NormalData_FSetString_DEFAULT map[string]bool

func (p *NormalData) GetFSetString() map[string]bool {
	return p.FSetString
}

var NormalData_FMapString_DEFAULT map[string]int64

func (p *NormalData) GetFMapString() map[string]int64 {
	return p.FMapString
}

var NormalData_F_MapData_DEFAULT *MapData

func (p *NormalData) GetF_MapData() *MapData {
	if !p.IsSetF_MapData() {
		return NormalData_F_MapData_DEFAULT
	}
	return p.F_MapData
}

var NormalData_F_ListData_DEFAULT *ListData

func (p *NormalData) GetF_ListData() *ListData {
	if !p.IsSetF_ListData() {
		return NormalData_F_ListData_DEFAULT
	}
	return p.F_ListData
}

var NormalData_F_SetData_DEFAULT *SetData

func (p *NormalData) GetF_SetData() *SetData {
	if !p.IsSetF_SetData() {
		return NormalData_F_SetData_DEFAULT
	}
	return p.F_SetData
}

var NormalData_F_TypedefData_DEFAULT TypedefData

func (p *NormalData) GetF_TypedefData() TypedefData {
	if !p.IsSetF_TypedefData() {
		return NormalData_F_TypedefData_DEFAULT
	}
	return *p.F_TypedefData
}
func (p *NormalData) IsSetFI64() bool {
	return p.FI64 != nil
}

func (p *NormalData) IsSetFI32() bool {
	return p.FI32 != nil
}

func (p *NormalData) IsSetFI16() bool {
	return p.FI16 != nil
}

func (p *NormalData) IsSetFByte() bool {
	return p.FByte != nil
}

func (p *NormalData) IsSetFDouble() bool {
	return p.FDouble != nil
}

func (p *NormalData) IsSetFString() bool {
	return p.FString != nil
}

func (p *NormalData) IsSetFBool() bool {
	return p.FBool != nil
}

func (p *NormalData) IsSetFStruct() bool {
	return p.FStruct != nil
}

func (p *NormalData) IsSetFEnum() bool {
	return p.FEnum != nil
}

func (p *NormalData) IsSetFBinary() bool {
	return p.FBinary != nil
}

func (p *NormalData) IsSetFListString() bool {
	return p.FListString != nil
}

func (p *NormalData) IsSetFSetString() bool {
	return p.FSetString != nil
}

func (p *NormalData) IsSetFMapString() bool {
	return p.FMapString != nil
}

func (p *NormalData) IsSetF_MapData() bool {
	return p.F_MapData != nil
}

func (p *NormalData) IsSetF_ListData() bool {
	return p.F_ListData != nil
}

func (p *NormalData) IsSetF_SetData() bool {
	return p.F_SetData != nil
}

func (p *NormalData) IsSetF_TypedefData() bool {
	return p.F_TypedefData != nil
}

func (p *NormalData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NormalData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FI64 = &v
	}
	return nil
}

func (p *NormalData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FI32 = &v
	}
	return nil
}

func (p *NormalData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FI16 = &v
	}
	return nil
}

func (p *NormalData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.FByte = &temp
	}
	return nil
}

func (p *NormalData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.FDouble = &v
	}
	return nil
}

func (p *NormalData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FString = &v
	}
	return nil
}

func (p *NormalData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.FBool = &v
	}
	return nil
}

func (p *NormalData) ReadField8(iprot thrift.TProtocol) error {
	p.FStruct = &NormalStruct{}
	if err := p.FStruct.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.FStruct, err)
	}
	return nil
}

func (p *NormalData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := Numberz(v)
		p.FEnum = &temp
	}
	return nil
}

func (p *NormalData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.FBinary = v
	}
	return nil
}

func (p *NormalData) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.FListString = tSlice
	for i := 0; i < size; i++ {
		var _elem36 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem36 = v
		}
		p.FListString = append(p.FListString, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *NormalData) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.FSetString = tSet
	for i := 0; i < size; i++ {
		var _elem37 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem37 = v
		}
		p.FSetString[_elem37] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *NormalData) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int64, size)
	p.FMapString = tMap
	for i := 0; i < size; i++ {
		var _key38 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key38 = v
		}
		var _val39 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val39 = v
		}
		p.FMapString[_key38] = _val39
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *NormalData) ReadField14(iprot thrift.TProtocol) error {
	p.F_MapData = &MapData{}
	if err := p.F_MapData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.F_MapData, err)
	}
	return nil
}

func (p *NormalData) ReadField15(iprot thrift.TProtocol) error {
	p.F_ListData = &ListData{}
	if err := p.F_ListData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.F_ListData, err)
	}
	return nil
}

func (p *NormalData) ReadField16(iprot thrift.TProtocol) error {
	p.F_SetData = &SetData{}
	if err := p.F_SetData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.F_SetData, err)
	}
	return nil
}

func (p *NormalData) ReadField17(iprot thrift.TProtocol) error {
	p.F_TypedefData = &TypedefData{}
	if err := p.F_TypedefData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.F_TypedefData, err)
	}
	return nil
}

func (p *NormalData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NormalData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NormalData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFI64() {
		if err := oprot.WriteFieldBegin("F_i64", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:F_i64: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.FI64)); err != nil {
			return fmt.Errorf("%T.F_i64 (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:F_i64: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFI32() {
		if err := oprot.WriteFieldBegin("F_i32", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:F_i32: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.FI32)); err != nil {
			return fmt.Errorf("%T.F_i32 (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:F_i32: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFI16() {
		if err := oprot.WriteFieldBegin("F_i16", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:F_i16: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.FI16)); err != nil {
			return fmt.Errorf("%T.F_i16 (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:F_i16: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFByte() {
		if err := oprot.WriteFieldBegin("F_byte", thrift.BYTE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:F_byte: %s", p, err)
		}
		if err := oprot.WriteByte(int8(*p.FByte)); err != nil {
			return fmt.Errorf("%T.F_byte (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:F_byte: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFDouble() {
		if err := oprot.WriteFieldBegin("F_double", thrift.DOUBLE, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:F_double: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.FDouble)); err != nil {
			return fmt.Errorf("%T.F_double (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:F_double: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFString() {
		if err := oprot.WriteFieldBegin("F_string", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:F_string: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FString)); err != nil {
			return fmt.Errorf("%T.F_string (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:F_string: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFBool() {
		if err := oprot.WriteFieldBegin("F_bool", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:F_bool: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.FBool)); err != nil {
			return fmt.Errorf("%T.F_bool (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:F_bool: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFStruct() {
		if err := oprot.WriteFieldBegin("F_struct", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:F_struct: %s", p, err)
		}
		if err := p.FStruct.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.FStruct, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:F_struct: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFEnum() {
		if err := oprot.WriteFieldBegin("F_enum", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:F_enum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.FEnum)); err != nil {
			return fmt.Errorf("%T.F_enum (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:F_enum: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFBinary() {
		if err := oprot.WriteFieldBegin("F_binary", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:F_binary: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FBinary); err != nil {
			return fmt.Errorf("%T.F_binary (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:F_binary: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFListString() {
		if err := oprot.WriteFieldBegin("F_list_string", thrift.LIST, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:F_list_string: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FListString)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.FListString {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:F_list_string: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetFSetString() {
		if err := oprot.WriteFieldBegin("F_set_string", thrift.SET, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:F_set_string: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.FSetString)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.FSetString {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:F_set_string: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetFMapString() {
		if err := oprot.WriteFieldBegin("F_map_string", thrift.MAP, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:F_map_string: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.FMapString)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.FMapString {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:F_map_string: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_MapData() {
		if err := oprot.WriteFieldBegin("F_MapData", thrift.STRUCT, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:F_MapData: %s", p, err)
		}
		if err := p.F_MapData.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.F_MapData, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:F_MapData: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_ListData() {
		if err := oprot.WriteFieldBegin("F_ListData", thrift.STRUCT, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:F_ListData: %s", p, err)
		}
		if err := p.F_ListData.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.F_ListData, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:F_ListData: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_SetData() {
		if err := oprot.WriteFieldBegin("F_SetData", thrift.STRUCT, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:F_SetData: %s", p, err)
		}
		if err := p.F_SetData.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.F_SetData, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:F_SetData: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_TypedefData() {
		if err := oprot.WriteFieldBegin("F_TypedefData", thrift.STRUCT, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:F_TypedefData: %s", p, err)
		}
		if err := p.F_TypedefData.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.F_TypedefData, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:F_TypedefData: %s", p, err)
		}
	}
	return err
}

func (p *NormalData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NormalData(%+v)", *p)
}

type TypedefData struct {
	// unused field # 1
	F_TypedefString *TypedefString `thrift:"F_TypedefString,2" json:"F_TypedefString"`
	F_TypedefEnum   *TypedefEnum   `thrift:"F_TypedefEnum,3" json:"F_TypedefEnum"`
	F_TypedefMap    TypedefMap     `thrift:"F_TypedefMap,4" json:"F_TypedefMap"`
}

func NewTypedefData() *TypedefData {
	return &TypedefData{}
}

var TypedefData_F_TypedefString_DEFAULT TypedefString

func (p *TypedefData) GetF_TypedefString() TypedefString {
	if !p.IsSetF_TypedefString() {
		return TypedefData_F_TypedefString_DEFAULT
	}
	return *p.F_TypedefString
}

var TypedefData_F_TypedefEnum_DEFAULT TypedefEnum

func (p *TypedefData) GetF_TypedefEnum() TypedefEnum {
	if !p.IsSetF_TypedefEnum() {
		return TypedefData_F_TypedefEnum_DEFAULT
	}
	return *p.F_TypedefEnum
}

var TypedefData_F_TypedefMap_DEFAULT TypedefMap

func (p *TypedefData) GetF_TypedefMap() TypedefMap {
	return p.F_TypedefMap
}
func (p *TypedefData) IsSetF_TypedefString() bool {
	return p.F_TypedefString != nil
}

func (p *TypedefData) IsSetF_TypedefEnum() bool {
	return p.F_TypedefEnum != nil
}

func (p *TypedefData) IsSetF_TypedefMap() bool {
	return p.F_TypedefMap != nil
}

func (p *TypedefData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TypedefData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := TypedefString(v)
		p.F_TypedefString = &temp
	}
	return nil
}

func (p *TypedefData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := TypedefEnum(v)
		p.F_TypedefEnum = &temp
	}
	return nil
}

func (p *TypedefData) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(TypedefMap, size)
	p.F_TypedefMap = tMap
	for i := 0; i < size; i++ {
		var _key40 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key40 = v
		}
		var _val41 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val41 = v
		}
		p.F_TypedefMap[_key40] = _val41
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TypedefData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TypedefData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TypedefData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_TypedefString() {
		if err := oprot.WriteFieldBegin("F_TypedefString", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:F_TypedefString: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.F_TypedefString)); err != nil {
			return fmt.Errorf("%T.F_TypedefString (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:F_TypedefString: %s", p, err)
		}
	}
	return err
}

func (p *TypedefData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_TypedefEnum() {
		if err := oprot.WriteFieldBegin("F_TypedefEnum", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:F_TypedefEnum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.F_TypedefEnum)); err != nil {
			return fmt.Errorf("%T.F_TypedefEnum (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:F_TypedefEnum: %s", p, err)
		}
	}
	return err
}

func (p *TypedefData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_TypedefMap() {
		if err := oprot.WriteFieldBegin("F_TypedefMap", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:F_TypedefMap: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.F_TypedefMap)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.F_TypedefMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:F_TypedefMap: %s", p, err)
		}
	}
	return err
}

func (p *TypedefData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TypedefData(%+v)", *p)
}

type NormalStruct struct {
	F_1 *string `thrift:"F_1,1" json:"F_1"`
}

func NewNormalStruct() *NormalStruct {
	return &NormalStruct{}
}

var NormalStruct_F_1_DEFAULT string

func (p *NormalStruct) GetF_1() string {
	if !p.IsSetF_1() {
		return NormalStruct_F_1_DEFAULT
	}
	return *p.F_1
}
func (p *NormalStruct) IsSetF_1() bool {
	return p.F_1 != nil
}

func (p *NormalStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NormalStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.F_1 = &v
	}
	return nil
}

func (p *NormalStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NormalStruct"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NormalStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetF_1() {
		if err := oprot.WriteFieldBegin("F_1", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:F_1: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.F_1)); err != nil {
			return fmt.Errorf("%T.F_1 (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:F_1: %s", p, err)
		}
	}
	return err
}

func (p *NormalStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NormalStruct(%+v)", *p)
}

type TestRequest struct {
	Data *NormalData `thrift:"Data,1" json:"Data"`
}

func NewTestRequest() *TestRequest {
	return &TestRequest{}
}

var TestRequest_Data_DEFAULT *NormalData

func (p *TestRequest) GetData() *NormalData {
	if !p.IsSetData() {
		return TestRequest_Data_DEFAULT
	}
	return p.Data
}
func (p *TestRequest) IsSetData() bool {
	return p.Data != nil
}

func (p *TestRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TestRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Data = &NormalData{}
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data, err)
	}
	return nil
}

func (p *TestRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TestRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("Data", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Data: %s", p, err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Data, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Data: %s", p, err)
		}
	}
	return err
}

func (p *TestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestRequest(%+v)", *p)
}

type TestResponse struct {
	Data *NormalData `thrift:"Data,1" json:"Data"`
}

func NewTestResponse() *TestResponse {
	return &TestResponse{}
}

var TestResponse_Data_DEFAULT *NormalData

func (p *TestResponse) GetData() *NormalData {
	if !p.IsSetData() {
		return TestResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *TestResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *TestResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TestResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Data = &NormalData{}
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data, err)
	}
	return nil
}

func (p *TestResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TestResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("Data", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Data: %s", p, err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Data, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Data: %s", p, err)
		}
	}
	return err
}

func (p *TestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestResponse(%+v)", *p)
}
