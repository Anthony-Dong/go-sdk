package varint

import (
	"testing"
)

func TestEncodeVarint(t *testing.T) {
	data := EncodeVarint(65535)
	t.Logf("%#v", data)

	// 大于 1<<7-1 都需要最高位置进行补位置！

	// 11111111 11111111
	// 00000000 01111111  取出低7位 ( data & 1<<7-1)

	// 			01111111  由于65535大于1<<7-1，所以高8位需要进行补位，因为这个字节需要设置了最高有效位(msb)! ( output | 1<<7 )
	//			10000000
	//			11111111

	// data >> 7
	//	=>
	// 00000001 11111111 取出低7位 ( data & 1<<7-1)
	// 			01111111

	// 			01111111 由于511大于(1<<7-1)所以 高8位需要进行补位，因为每个字节都设置了最高有效位(msb)! ( output | 1<<7 )
	//			10000000
	//			11111111

	// 			00000011 由于3 < (1<<7-1) 不需要设置最高有效位置

	// 65535 （大端）
	// [16-8]   [8-1]
	// 11111111 11111111
	// 输出:

	// msb[7-1] msb[8-14] [16-15]
	// 11111111 11111111 00000011
	// []byte{0xff, 0xff, 0x3} （小端 表示低地址对应着低位置）

	// 解析回来！（逆向过程）

	// 11111111 11111111 00000011

	// data[0] 取出低位 [7-1]
	// 11111111 取出7位来（ & 1<<7-1）
	// 01111111
	// 01111111

	// 00000000
	// 01111111

	// data[1]
	// 11111111
	// 01111111
	// 01111111

	// 01111111   (我们需要把 01111111 放到 [8-14] 位上)

	// 00111111 10000000     01111111<<7
	//          01111111
	// 00111111 11111111

	// data[2]
	// 00000011
	// 01111111
	// 00000011

	// 00000011     00000011<<14

	// 00000000 11000000 00000000
	// 			00111111 11111111
	// 			11111111 11111111

	// 00000011
	// 10000000
	// 没有最高位位1，结束！！！

	t.Log(ToByte(65535)) // 11111111 11111111

	t.Log(ToByte(65535 >> 7))      // 00000001 11111111
	t.Log(ToByte(65535 >> 7 >> 7)) // 00000011
	// 11111111 11111111 00000011
	for _, elem := range data {
		t.Log(ToByte(int(elem)))
	}
}
